* TODO Graph class
** TODO Set of constructors
   Is there really a need for several? -> one with no edges, one with a list of
   edges, one for random generation.
** DONE Add edges
   Positive cost, undirected (think of connectivity matrix, only a triangle
   matrix).
** TODO Dijkstra's algorithm as a member function


* DONE Random initialization of graphes
** DONE As a procedure or as a constructor
** DONE edge density and distance range as parameters
   Pick a number of edges randomly from all possible edges (not a probabililty
   of being an edge, for all edges).

* TODO main program
** TODO Compute a set of randomly generated graphs
** TODO Compute an average shortest path

* TODO Comments
** TODO 200 words on what you learned
** TODO Output showing the average path length calculation
   Densities 20 %, 40 %, 50 nodes, distance within [1.0; 10.0]. Only average
   from vertix 1 to all others (omit the value if no path is found).

* TODO Running changes
** DONE edge_add() must check if the edge does not already exist
** DONE reuse Edge::Edge(int, int) inside Edge::Edge(int, int, cost_t)?
** DONE change operator<< of graph
   To use a function of the type graph.edge_cost_get(edge).
** DONE make Edge internal to Graph. All functions of Graph can use x, y.
   Nearly doable. A constructor still uses Edge as input, and the function
   generating all possible edges for a graph still output a vector of Edges.
** DONE check the return value of random_cost_calculate().
   Does it really give full span?
